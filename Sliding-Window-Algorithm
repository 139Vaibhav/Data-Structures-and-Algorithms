#include<bits/stdc++.h>
using namespace std;

vector<int> findAnagrams(string s, string p) {
        // vector<int> V;
        // do{
        //     for(int i=0;i<s.length()-p.length()+1;i++){
        //         if(p==s.substr(i,p.length()))
        //             V.push_back(i);
        //     }
        // }while(next_permutation(p.begin(), p.end()));
        // sort(V.begin(), V.end());
        // return V;
                vector<int> pv(26,0), sv(26,0), res;
        if(s.size() < p.size())
           return res;
           cout<<s[0]-'a'<<"\n";
        // fill pv, vector of counters for pattern string and sv, vector of counters for the sliding window
        for(int i = 0; i < p.size(); ++i)
        {
            cout<<"term pv : "<<++pv[p[i]-'a']<<" ";
            cout<<"term sv : "<<++sv[s[i]-'a']<<" ";
        }
        if(pv == sv)
           res.push_back(0);

        //here window is moving from left to right across the string. 
        //window size is p.size(), so s.size()-p.size() moves are made 
        for(int i = p.size(); i < s.size(); ++i) 
        {
             // window extends one step to the right. counter for s[i] is incremented 
             cout<<s[i]-'a'<<"\n";
            ++sv[s[i]-'a'];
            
            // since we added one element to the right, 
            // one element to the left should be discarded. 
            //counter for s[i-p.size()] is decremented
            --sv[s[i-p.size()]-'a']; 

            // if after move to the right the anagram can be composed, 
            // add new position of window's left point to the result 
            if(pv == sv)  // this comparison takes O(26), i.e O(1), since both vectors are of fixed size 26. Total complexity O(n)*O(1) = O(n)
               res.push_back(i-p.size()+1);
        }
        return res;
    }

int main(){
    string s,p;
    cin>>s>>p;
    std::vector<int> res ;
    res = findAnagrams(s,p);
    for(int i=0;i<res.size();i++)
        cout<<res[i]<<" ";
}
